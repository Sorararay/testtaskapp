services:
  postgres:
    image: postgres:16.6-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taskdb
    ports:
      - 5432:5432
    volumes:
    - db-store:/var/lib/postgresql/data
  migrator:
    build:
      context: ./containers/migrator
    environment:
      DB_HOST: postgres
      DB_NAME: taskdb
      DB_PORT: "5432"
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      SSL_MODE: disable
    command: >
      sh -c '
          bash /migrator/migrate.sh $$DB_HOST $$DB_PORT $$DB_NAME $$DB_USERNAME $$DB_PASSWORD up $$SSL_MODE
      '
    depends_on:
      - postgres


  api:
    build:
      context: .
      dockerfile: ./containers/api/Dockerfile
    depends_on:
      - postgres
    # healthcheck:
    #   test: "curl -f http://localhost:8180/healthz || exit 1"
    #   interval: 10s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    # command:
    #   - "server"
    #   - "--config-file=/run/secrets/api_config"
    # secrets:
    #   - api_config
    volumes:
      - ./containers/api/app:/app
    command: /bin/bash
    tty: true


  # nginx-api:
  #   build:
  #     context: ./containers/nginx-api
  #   depends_on:
  #     api:
  #       condition: service_healthy
  #   healthcheck:
  #     test: "curl -H 'Host: api' -f http://localhost:80/healthz || exit 1"
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   environment:
  #     NGINX_PORT: 80
  #     SERVER_NAME: api
  #     BACKEND_HOST: api:8180
  #     BACKEND_MAX_FAILS: 3
  #     BACKEND_FAIL_TIMEOUT: 10s
  #   ports:
  #     - "9180:80"

  # web:
  #   build:
  #     context: .
  #     dockerfile: ./containers/web/Dockerfile
  #   depends_on:
  #     - nginx-api
  #   healthcheck:
  #     test: "curl -f http://localhost:8280/healthz || exit 1"
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   command:
  #     - "server"
  #     - "--api-address=http://nginx-api:80"
  #   volumes:
  #     - assets_data:/go/src/github.com/gihyodocker/taskapp/assets

  # nginx-web:
  #   build:
  #     context: ./containers/nginx-web
  #   depends_on:
  #     web:
  #       condition: service_healthy
  #   healthcheck:
  #     test: "curl -f http://localhost:80/healthz || exit 1"
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   environment:
  #     NGINX_PORT: 80
  #     SERVER_NAME: localhost
  #     ASSETS_DIR: /var/www/assets
  #     BACKEND_HOST: web:8280
  #     BACKEND_MAX_FAILS: 3
  #     BACKEND_FAIL_TIMEOUT: 10s
  #   ports:
  #     - "9280:80"
  #   volumes:
  #     - assets_data:/var/www/assets

# secrets:
#  api_config:
#    file: ./api-config.yaml

volumes:
  db-store:
  # assets_data:
